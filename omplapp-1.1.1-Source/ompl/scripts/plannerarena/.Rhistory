version
library(ggplot2)
qplot(mpg, wt, data = mtcars)
library(ggplot2)
qplot(mpg, wt, data = mtcars)
library(ggplot2)
path.package('ggplot2')
library('ggplot2')
.rs.rpc.get_package_install_context()
library('ggplot2')
library(ggplot2)
install.packages("devtools")
help.start()
install.packages("optparse")
help.start()
?mean
args(mean)
example(mean)
c(0:10, 50)
?rbind
a <- data.frame(a=1,b=2)
a
b <- data.frame(c=1,b=3)
b
c <- rbind(a,b)
c <- data.frame(a,b,c)
c <- data.frame(a=NULL,b=NULL,c=NULL)
c
d <- rbind(c,a,b)
d <- rbind(c,a)
d
?plyr
search(plyr)
search("plyr")
help.search("plyr")
names(a)
names(c)
names(b)
"a" in names(b)
View(c)
View(b)
View(a)
d <- data.frame(a,2)
d
View(a)
d <- rbind(b,a)
d <- merge(b,a)
d
install.packages(c("bitops", "colorspace", "devtools", "evaluate", "getopt", "labeling", "maps", "mclust", "munsell", "RSQLite", "XML"))
library("ggplot2", lib.loc="/Users/mmoll/Library/R/3.0/library")
detach("package:ggplot2", unload=TRUE)
version()
install.packages(c("devtools", "digest", "lubridate", "mapproj", "scatterplot3d"))
library("ggplot2", lib.loc="/Users/mmoll/Library/R/3.0/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Users/mmoll/Library/R/3.0/library")
library("RSQLite", lib.loc="/Users/mmoll/Library/R/3.0/library")
con <- dbConnect(dbDriver("SQLite"), "/Users/mmoll/foo.db")
dbListTables(con)
progress <- dbReadTable(con, "progress")
qplot(time, best_cost, data = progress, geom = c("point", "smooth"))
qplot(time, best_cost, data = progress, geom = c("point", "smooth")) + aes(group = runid)
runs <- dbReadTable(con, "runs")
qplot(plannerid, time, data=runs)
qplot(plannerid, time, data=runs) + geom_boxplot()
qplot(plannerid, time, data=runs) + geom_boxplot() + aes(group = plannerid)
bestcost <- dbGetQuery(con, "select planner.name, progress.time, progress.best_cost from plannerConfigs inner join runs inner join progress where plannerConfigs.id=runs.plannerid and runs.id=progress.runid")
bestcost <- dbGetQuery(con, "select plannerConfigs.name, progress.time, progress.best_cost from plannerConfigs inner join runs inner join progress where plannerConfigs.id=runs.plannerid and runs.id=progress.runid")
qplot(time, best_cost, data=bestcost, geom = c("point", "smooth")) + aes(group = plannerConfigs.name)
qplot(time, best_cost, data=bestcost, geom = c("point", "smooth")) +
;
qplot(time, best_cost, data=bestcost, geom = c("point", "smooth")) +
aes(group = name)
qplot(time, best_cost, data=bestcost, geom = c("jitter", "smooth")) + aes(group=name)
qplot(time, best_cost, data=bestcost, geom = "jitter") + aes(group=name)
qplot(time, best_cost, data=bestcost, geom = "jitter", alpha=I(1/10)) + aes(group=name)
qplot(time, best_cost, data=bestcost, geom = "density" + aes(group=name)
;
qplot(time, best_cost, data=bestcost, geom = "density") + aes(group=name)
qplot(time, best_cost, data=bestcost, geom = "jitter", alpha=I(1/10), colour=name) + aes(group=name)
qplot(time, best_cost, data=bestcost, geom = "jitter", alpha=I(1/2), colour=name) + aes(group=name)
qplot(time, best_cost, data=bestcost, geom = c("point","smooth"), alpha=I(1/2), colour=name) + aes(group=name)
progress <- dbGetQuery(con, "select plannerConfigs.name, progress.* from plannerConfigs inner join runs inner join progress where plannerConfigs.id=runs.plannerid and runs.id=progress.runid")
colnames(progress)
foo <- colnames(progress)
foo
for (in in 4:length(foo)) { print(foo[i]) }
for (i in 4:length(foo)) { print(foo[i]) }
runs <- dbGetQuery(con, "SELECT plannerConfigs.name, runs.* FROM plannerConfigs INNER JOIN runs INNER JOIN runs ON plannerConfigs.id = runs.plannerid")
foo <- dbGetQuery(con, "SELECT plannerConfigs.name, runs.* FROM plannerConfigs INNER JOIN runs INNER JOIN runs ON plannerConfigs.id = runs.plannerid")
foo <- dbGetQuery(con, "SELECT plannerConfigs.name, runs.* FROM plannerConfigs INNER JOIN runs ON plannerConfigs.id = runs.plannerid")
columnNames(foo)
colnames(foo)
qplot(plannerid, time, data=runs) + geom_boxplot() + aes(group = plannerid)
qplot(plannerid, time, data=runs) + geom_boxplot() + aes(group = name)
qplot(plannerid, time, data=foo) + geom_boxplot() + aes(group = name)
qplot(name, time, data=foo) + geom_boxplot() + aes(group = name)
qplot(name, time, data=foo) + geom_boxplot()
qplot(name, time, data=foo)
qplot(name, time, data=foo) + geom_boxplot()
qplot(name, time, data=foo, geom="jitter") + geom_boxplot()
qplot(name, time, data=foo, geom="jitter")
qplot(name, time, data=foo, geom="jitter") + geom_boxplot()
qplot(name, time, data=foo, geom=c("jitter","boxplot"))
remove.packages("plyr")
install.packages("plyr")
qplot(name, time, data=foo, geom=c("jitter","boxplot"))
library("ggplot2", lib.loc="/Users/mmoll/Library/R/3.0/library")
qplot(name, time, data=foo, geom=c("jitter","boxplot"))
qplot(time, best_cost, data=bestcost, geom = "jitter", alpha=I(1/2), colour=name) + aes(group=name)
qplot(time, best_cost, data=bestcost, alpha=I(1/2), colour=name) + aes(group=name)
qplot(time, best_cost, data=bestcost, alpha=I(1/2), colour=name) + aes(group=name) + geom_smooth()
qplot(time, best_cost, data=bestcost, alpha=I(1/2), colour=name, geom=c("point", "smooth")) + aes(group=name)
qplot(time, best_cost, data=bestcost, alpha=I(1/2), colour=name, geom=c("point", "smooth"), aes(group=name))
qplot(time, best_cost, data=bestcost, alpha=I(1/2), colour=name, geom=c("point", "smooth"))
x <- colnames(best_cost)
x <- colnames(bestcost)
x
gsub("_","",x)
x
x <- gsub("_"," ",x)
install.packages("gridBase")
install.packages("googleVis")
install.packages(c("gridBase", "plyr", "scatterplot3d", "xtable"))
install.packages("mclust")
install.packages("EMCluster")
silhouette()
data(ruspini)
pr4 <- pam(ruspini, 4)
str(si <- silhouette(pr4))
(ssi <- summary(si))
plot(si) # silhouette plot
plot(si, col = c("red", "green", "blue", "purple"))# with cluster-wise coloring
library(cluster)
data(xclara)
km <- kmeans(xclara,3)
dissE <- daisy(xclara)
sk <- silhouette(km$cl, dissE)
plot(sk)
library(mclust)
library('mclust')
data(xclara)
set.seed(7)
str(xc1k <- xclara[sample(nrow(xclara), size = 1000) ,])
cl3 <- clara(xc1k, 3)
plot(silhouette(cl3))
data(ruspini)
clarax <- clara(x, 2, samples=50)
library('cluster')
library('clara')
data(ruspini)
pr4 <- pam(ruspini, 4)
str(si <- silhouette(pr4))
(ssi <- summary(si))
plot(si) # silhouette plot
plot(si, col = c("red", "green", "blue", "purple"))# with cluster-wise coloring
si
ssi
ssi.clus.avg.widths
ssi$clus.avg.widths
ssi$avg.width
install.packages(c("ggplot2", "googleVis", "maps"))
library('shiny')
bsDemo()
install.packages("shinyBS")
library('shinyBS')
bsDemo()
install.packages(c("DBI", "devtools", "googleVis", "httpuv", "jsonlite", "maps", "mime", "Rcpp", "RSQLite", "shiny"))
library("acepack", lib.loc="~/Library/R/3.1/library")
library('shiny')
install.packages(c("Hmisc", "jsonlite", "RCurl"))
install.packages(c("ggthemes", "httr"))
library(shiny)
install.packages("ggvis")
install.packages("knitr")
install.packages(c("colorspace", "ggthemes", "manipulate"))
install.packages("fpc")
library(mclust)
gfv=read.csv('~/Documents/MHC-I/test.csv')
library(ggplot2)
c <- mclustBIC(gfv,1:30,c('EII','VEV','VVV'))
summary(c)
summary(c,gfv)
gfv@c <- summary(c,gfv)@classifications
gfv@c <- summary(c,gfv)$classifications
gfv$c <- summary(c,gfv)$classifications
qplot(x,y,data=gfv,color=factor(c))
qplot(x,y,data=gfv
0
qplot(x,y,data=gfv)
qplot(x,y,data=gfv,color=c)
View(gfv)
s<-summary(c,gfv)
gfv$c <- summary(c,gfv)$classification
View(gfv)
qplot(x,y,data=gfv,color=c)
qplot(x,y,data=gfv,color=factor(c))
gfv$c <- summary(mclustBIC(gfv,1:30,c('EII','VEV','VVV')),gfv)$classification
qplot(x,y,data=gfv,color=factor(c))
gfv$c <- summary(mclustBIC(gfv,1:20,c('EII','VEV','VVV')),gfv)$classification
qplot(x,y,data=gfv,color=factor(c))
gfv=read.csv('~/Documents/MHC-I/test.csv')
gfv$c <- summary(mclustBIC(gfv,1:20,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:30,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:20,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:30,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:20,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:30,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:40,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:30,c('EII','VEV','VVV')),gfv)$classification
gfv$c <- summary(mclustBIC(gfv,1:30,c('EII','VEV','VVV')),gfv)$classification
qplot(x,y,data=gfv,color=factor(c))
install.packages(c("colorspace", "manipulate", "Rcpp"))
install.packages("manipulate")
install.packages("colorspace")
help(options)
getOption("pdfviewer")
vignette(mclust)
vignette("mclust")
library(mclust)
vignette("mclust")
vignette(mclust)
vignette(Mclust)
library(bbmle)
vignette("mle2")
library(bbmle)
vignette("bbmle")
library(bbmle)
vignette()
library(ggplot2)
vignette(release)
vignette("release")
library(EMCluster)
vignette("EMCluster-guide")
library(EMCluster)
vignette("EMCluster-guide")
data(iris)
cS <- as.character(Sp <- iris$Species)
cS[Sp == "setosa"] <- "S"
cS[Sp == "versicolor"] <- "V"
cS[Sp == "virginica"] <- "g"
ai <- agnes(iris[, 1:4])
plot(ai, labels = cS, nmax = 150)# bannerplot labels are mess
library(cluster)
ai <- agnes(iris[, 1:4])
plot(ai, labels = cS, nmax = 150)# bannerplot labels are mess
plot(ai, labels = cS, nmax = 150)# bannerplot labels are mess
install.packages(c("formatR", "Formula", "ggplot2", "ggvis", "highr", "jsonlite", "manipulate", "mime", "rstudioapi", "shinyBS"))
install.packages(c("evaluate", "jsonlite", "manipulate", "mclust", "roxygen2"))
install.packages(c("BH", "devtools", "evaluate", "formatR", "highr", "Hmisc", "knitr", "manipulate", "markdown", "mclust", "plyr", "Rcpp", "RCurl", "rmarkdown", "shiny", "stringr"))
install.packages("manipulate")
install.packages(c("diptest", "ggvis", "manipulate", "rversions", "XML"))
library(ggplot2)
library(scales)
demo(colors)
install.packages("corrplot")
install.packages("igraph")
install.packages("rgl")
install.packages("extrafont")
library(extrafont)
font_import()
install.packages("ggthemes")
install.packages("mclust")
install.packages("rmarkdown")
install.packages("RSQLite")
print sys.frame()
print(sys.frame())
print(sys.frame(0))
sf <- sys.frame(0)
sf$ofile
sf <- sys.frame(1)
paste('a','b')
paste0('a','b')
install.packages("shinyjs")
install.packages("htmlwidgets")
install.packages("Rcpp")
install.packages("yaml")
library(yaml)
yaml.load_file('~/omplapp/resources/3D/cubicles.cfg')
yaml.load_file('/Users/mmoll/omplapp/resources/3D/cubicles.cfg')
yaml.load_file(/Users/mmoll/omplapp/resources/3D/cubicles.cfg)
install.packages("toml")
yaml.load_file("/Users/mmoll/omplapp/resources/3D/cubicles.cfg")
library(markdown)
yaml.load_file("/Users/mmoll/omplapp/resources/3D/cubicles.cfg")
yaml.load_file("/Users/mmoll/foo.cfg")
a <- yaml.load_file("/Users/mmoll/foo.cfg")
yaml.load(a)
a <- yaml.load_file("/Users/mmoll/foo.cfg")
a
yaml.load(a)
b<-yaml.load(a)
b
b<-yaml.load(a,FALSE)
b
install.packages("RcppTOML")
library(RcppTOML)
a <- parseTOML("/Users/mmoll/omplapp/resources/3D/cubicles.cfg")
a <- parseTOML("/Users/mmoll/foo.cfg")
file <- system.file("toml", "example.toml", package="RcppTOML")
toml <- parseTOML(file)
summary(toml)
print(toml)
file
toml <- parseTOML(file)
a <- parseTOML("/Users/mmoll/omplapp/resources/3D/cubicles.cfg")
a <- parseTOML("/Users/mmoll/foo.cfg")
a <- parseTOML("/Users/mmoll/foo.cfg")
a <- parseTOML("/Users/mmoll/foo.cfg")
a <- parseToml("/Users/mmoll/foo.cfg")
a <- parseToml("/Users/mmoll/foo.cfg")
a <- parseToml("/Users/mmoll/foo.cfg")
a
a <- parseToml("/Users/mmoll/foo.cfg")
a
a$benchmark
Parse.INI <- function(INI.filename)
{
connection <- file(INI.filename)
Lines  <- readLines(connection)
close(connection)
Lines <- chartr("[]", "==", Lines)  # change section headers
connection <- textConnection(Lines)
d <- read.table(connection, as.is = TRUE, sep = "=", fill = TRUE)
close(connection)
L <- d$V1 == ""                    # location of section breaks
d <- subset(transform(d, V3 = V2[which(L)[cumsum(L)]])[1:3],
V1 != "")
ToParse  <- paste("INI.list$", d$V3, "$",  d$V1, " <- ",
as.numeric(d$V2), sep="") # if numeric values!
INI.list <- list()
eval(parse(text=ToParse))
return(INI.list)
}
a <- Parse.INI("/Users/mmoll/foo.cfg")
a
Lines <- readLines("/Users/mmoll/foo.cfg")
Lines2 <- chartr("[]", "==", Lines)
DF <- read.table(textConnection(Lines2), as.is = TRUE, sep = "=", fill = TRUE)
DF2 <- transform(DF, V3 = ifelse(V1 == "", V2, NA))
L <- !is.na(DF2$V3)
DF3 <- transform(DF2, V3 = V3[c(NA, which(L))[cumsum(L)+1]])
subset(DF3, V1 != "")
Lines <- readLines("/Users/mmoll/omplapp/resources/3D/cubicles-opt.cfg")
Lines <- readLines("/Users/mmoll/omplapp/resources/3D/cubicles_opt.cfg")
Lines2 <- chartr("[]", "==", Lines)
DF <- read.table(textConnection(Lines2), as.is = TRUE, sep = "=", fill = TRUE)
DF2 <- transform(DF, V3 = ifelse(V1 == "", V2, NA))
L <- !is.na(DF2$V3)
DF3 <- transform(DF2, V3 = V3[c(NA, which(L))[cumsum(L)+1]])
subset(DF3, V1 != "")
DF
DF2
DF3
cumsum(L)+1
cumsum(L)
L
c(NA, which(L))
V3[c(NA, which(L))[cumsum(L)+1]]
DF2$V3[c(NA, which(L))[cumsum(L)+1]]
DF2$V3[c(NA, which(L))]
which(L)
c(NA, which(L))
Lines <- readLines("/Users/mmoll/omplapp/resources/3D/cubicles_opt.cfg")
section <- ""
f <- function(x) {
if (length(x) == 1) section <<- gsub("[\\[\\]]", "", x)
if (length(x) <= 1) return()
return(c(x, section))
}
do.call("rbind", lapply(strsplit(Lines, "="), f))
a<-do.call("rbind", lapply(strsplit(Lines, "="), f))
View(a)
Parse.INI <- function(INI.filename)
{
connection <- file(INI.filename)
Lines  <- readLines(connection)
close(connection)
Lines <- chartr("[]", "==", Lines)  # change section headers
connection <- textConnection(Lines)
d <- read.table(connection, as.is = TRUE, sep = "=", fill = TRUE)
close(connection)
L <- d$V1 == ""                    # location of section breaks
d <- subset(transform(d, V3 = V2[which(L)[cumsum(L)]])[1:3],
V1 != "")
ToParse  <- paste("INI.list$", d$V3, "$",  d$V1, " <- '",
d$V2, "'", sep="")
INI.list <- list()
eval(parse(text=ToParse))
return(INI.list)
}
b <- Parse.INI("/Users/mmoll/omplapp/resources/3D/cubicles_opt.cfg")
b
b$benchmark
install.packages(c("curl", "evaluate", "shiny", "shinyjs"))
install.packages("knitr")
install.packages(c("curl", "dplyr", "R6", "rmarkdown", "scales", "V8"))
install.packages(c("evaluate", "formatR", "highr", "jsonlite", "mime", "Rcpp", "shinyjs", "V8"))
setwd('~/omplapp/ompl/scripts/plannerarena')
library(shiny)
options(shiny.maxRequestSize =1000000000)
library(RSQLite)
con <- dbConnect(dbDriver("SQLite"), "~/Desktop/variable_difficulty_kinematic_chain/variable_difficulty.db")
values <- dbGetQuery(con, "SELECT DISTINCT hardness AS \"values\" FROM experiments")
values
values <- values$values
sprintf("%s", values[4])
runApp()
values <- dbGetQuery(con, 'SELECT plannerConfigs.name AS planner, runs.time AS attr FROM plannerConfigs INNER JOIN runs ON plannerConfigs.id = runs.plannerid INNER JOIN experiments ON experiments.id = runs.experimentid WHERE experiments.name="pm_v" AND experiments.version="OMPL 1.0.0" AND (plannerConfigs.name = "geometric_RRT" OR plannerConfigs.name = "geometric_KPIECE1" OR plannerConfigs.name = "geometric_EST" OR plannerConfigs.name = "geometric_EST(EE_1_cell)") AND experiments.hardness = "0.833333333333333"')
values <- dbGetQuery(con, 'SELECT plannerConfigs.name AS planner, runs.time AS attr FROM plannerConfigs INNER JOIN runs ON plannerConfigs.id = runs.plannerid INNER JOIN experiments ON experiments.id = runs.experimentid WHERE experiments.name="pm_v" AND experiments.version="OMPL 1.0.0" AND (plannerConfigs.name = "geometric_RRT" OR plannerConfigs.name = "geometric_KPIECE1" OR plannerConfigs.name = "geometric_EST" OR plannerConfigs.name = "geometric_EST(EE_1_cell)") AND experiments.hardness = 0.833333333333333')
values
values <- dbGetQuery(con, 'SELECT plannerConfigs.name AS planner, runs.time AS attr FROM plannerConfigs INNER JOIN runs ON plannerConfigs.id = runs.plannerid INNER JOIN experiments ON experiments.id = runs.experimentid WHERE experiments.hardness = 0.833333333333333')
values <- dbGetQuery(con, 'SELECT plannerConfigs.name AS planner, runs.time AS attr FROM plannerConfigs INNER JOIN runs ON plannerConfigs.id = runs.plannerid INNER JOIN experiments ON experiments.id = runs.experimentid WHERE experiments.hardness > 0.83')
values <- dbGetQuery(con, 'SELECT plannerConfigs.name AS planner, runs.time AS attr FROM plannerConfigs INNER JOIN runs ON plannerConfigs.id = runs.plannerid INNER JOIN experiments ON experiments.id = runs.experimentid WHERE experiments.hardness > 0.83 AND experiments.hardness < 0.83334')
dval <- dbGetQuery(con, "SELECT DISTINCT hardness AS \"values\" FROM experiments")
dval <- dval$values
values <- dbGetQuery(con, 'SELECT hardness FROM experiments WHERE experiments.hardness > 0.83 AND experiments.hardness < 0.83334')
values$hardness[1]-dval[4]
values$hardness[1]-0.833333333333333
typeof(values$hardness[1])
runApp()
val <- '1.23'
stri_match_all(val, '[-+]?\d*\.\d+|\d+')
stri_match_all(val, '[-+]?\\d*\\.\\d+|\\d+')
library(stringi)
stri_match_all(val, '[-+]?\\d*\\.\\d+|\\d+')
stri_match_all_regex(val, '[-+]?\\d*\\.\\d+|\\d+')
val <- 'foo'
stri_match_all_regex(val, '[-+]?\\d*\\.\\d+|\\d+')
stri_match_all_regex(val, '[-+]?\\d*\\.\\d+|\\d+')[[1]]
is.na(stri_match_all_regex(val, '[-+]?\\d*\\.\\d+|\\d+'))
val <- '1.23'
is.na(stri_match_all_regex(val, '[-+]?\\d*\\.\\d+|\\d+'))
runApp()
regexpr('[-+]?\\d*\\.\\d+|\\d+', '1.23')
regexpr('[-+]?\\d*\\.\\d+|\\d+', 'foo')
d<-regexpr('[-+]?\\d*\\.\\d+|\\d+', 'foo')
d
d[1]
d <- regexpr('[-+]?\\d*\\.\\d+|\\d+', 'foo')
d[1]
d <- regexpr('[-+]?\\d*\\.\\d+|\\d+', 'foo')[1]
d
d <- regexpr('[-+]?\\d*\\.\\d+|\\d+', '123')[1]
d
runApp()
